## ------ extensions ------ ## 

AWS_EXTENSIONS=(
    "lambda_download"
    "lambda_getenv"
    "kinesis_peek"
    "s3_peek"
    "s3_random_cp"
    "elbv2_describe_target_groups"
    "elbv2_describe_load_balancer"
    "elbv2_dnsname"
)

function lambda_download() {
    for arg in "$@"; do
      case $arg in
        --function-name=*|--function=*)
          local function_name="${arg#*=}"
      esac
    done

    f_desc=$(aws_runner ${OPTS} lambda get-function "$@")
    _ret=$?; test ${_ret} -ne 0 && return ${_ret}

    curl $(echo ${f_desc} | jq -r '.Code.Location') -o ${function_name}.zip
    unzip ${function_name}.zip -d ${function_name}
    rm ${function_name}.zip
}

function lambda_getenv() {
    for arg in "$@"; do
      case $arg in
        --function-name=*|--function=*)
          local function_name="${arg#*=}"
      esac
    done

    f_desc=$(aws_runner ${OPTS} lambda get-function-configuration "$@")
    _ret=$?; test ${_ret} -ne 0 && return ${_ret}

    echo ${f_desc} | jq -r '.Environment.Variables' | sed "s/^[{}[:blank:]]*\S*//g" | sed "s/\"//g" | sed "s/,$//g" | sed "s/: /=/g" | grep -v "^$"
}

function kinesis_peek() {
    for arg in "$@"; do
      case $arg in
        --stream-name=*)
          local stream_name="${arg#*=}"
          ;;
        --limit=*)
          local limit="${arg#*=}"
          ;;
      esac
    done

    rtext=$(aws_runner ${OPTS} kinesis list-shards --stream-name=${stream_name})
    _ret=$?; test ${_ret} -ne 0 && return ${_ret}
    shard=$(echo ${rtext} | jq -r '.Shards[0].ShardId')

    rtext=$(aws_runner ${OPTS} kinesis get-shard-iterator --stream-name=${stream_name} --shard-id=${shard} --shard-iterator-type=LATEST)
    _ret=$?; test ${_ret} -ne 0 && return ${_ret}
    iterator=$(echo ${rtext} | jq -r '.ShardIterator')

    rtext=$(aws_runner ${OPTS} kinesis get-records --shard-iterator=${iterator} --limit=${limit:-1})
    _ret=$?; test ${_ret} -ne 0 && return ${_ret}
    blob=$(echo ${rtext} | jq -r ".Records[] | .Data" | base64 -d)
    echo ${blob}
}

function s3_peek() {
    _tmpfile=$(mktemp /tmp/aws-cli-extension.XXXXXX)
    aws_runner s3 random-cp $1 ${_tmpfile} > /dev/null 2> /dev/null

    if [ -s ${_tmpfile} ]; then
        gunzip -c ${_tmpfile}
    fi
}

function s3_random_cp() {
    local s3regex="s3:\/\/\\([^\/]*\\)\/\\(.*\\)"

    if [ $# -ge 1 ]; then
        local mpath=$(echo $1 | sed -e "s/${s3regex}/\1:\2/g")
        local bucket=${mpath%:*}
        local prefix=${mpath#*:}
        local outfile=$2
    fi

    if [ -n "${bucket}" ] && [ -n "${prefix}" ]; then
        local rtext=$(aws_runner s3api list-objects --bucket=${bucket} --prefix=${prefix} --max-item=1)
        _ret=$?; test ${_ret} -ne 0 && return ${_ret}
        local s3key=$(echo ${rtext} | jq -r '.Contents[0] | .Key')

        if [ -z ${s3key} ] || [ ${s3key} = "null" ]; then
            return
        fi

        if [ -z ${outfile} ]; then
            outfile=${s3key##*/}
        fi

        aws_runner s3api get-object --bucket=${bucket} --key=${s3key} ${outfile}
        _ret=$?; test ${_ret} -ne 0 && return ${_ret}

        echo "Downloaded ${outfile}"
    fi
}

function elbv2_describe_target_groups() {
    for arg in "$@"; do
      case $arg in
        --load-balancer-name=*)
          local load_balancer_name="${arg#*=}"
      esac
    done

    if [ -z "${load_balancer_name}" ]; then
        bypass=1 aws_runner ${OPTS} elbv2 describe-target-groups "$@"
    else
        f_desc=$(aws_runner ${OPTS} elbv2 describe-load-balancer --load-balancer-name=${load_balancer_name})
        _ret=$?; test ${_ret} -ne 0 && return ${_ret}

        arn=$(echo ${f_desc} | jq -rc ".LoadBalancerArn")
        
        if [ -z "${arn}" ]; then
            echo "An error occurred (ValidationError) when calling the DescribeTargetGroups operation: '$load_balancer_name' is not a valid load balancer name"
        else
            bypass=1 aws_runner ${OPTS} elbv2 describe-target-groups --load-balancer-arn=${arn}
        fi
    fi
}

function elbv2_describe_load_balancer() {
    for arg in "$@"; do
      case $arg in
        --load-balancer-name=*)
          local load_balancer_name="${arg#*=}"
      esac
    done

    if [ -z "${load_balancer_name}" ]; then
        echo "An error occurred (ValidationError) when calling the DescribeTargetGroups operation: '$load_balancer_name' is not a valid load balancer name"
    else
        f_desc=$(aws_runner ${OPTS} elbv2 describe-load-balancers)
        _ret=$?; test ${_ret} -ne 0 && return ${_ret}

        echo ${f_desc} | jq -rc ".LoadBalancers [] | select(.LoadBalancerName == \""${load_balancer_name}"\")"
    fi
}

function elbv2_dnsname() {
    for arg in "$@"; do
      case $arg in
        --load-balancer-name=*)
          local load_balancer_name="${arg#*=}"
      esac
    done

    if [ -z "${load_balancer_name}" ]; then
        echo "An error occurred (ValidationError) when calling the DescribeTargetGroups operation: '$load_balancer_name' is not a valid load balancer name"
    else
        f_desc=$(aws_runner ${OPTS} elbv2 describe-load-balancer --load-balancer-name=${load_balancer_name})
        _ret=$?; test ${_ret} -ne 0 && return ${_ret}

        echo ${f_desc} | jq -r ".DNSName"
    fi
}

## ------------------------ ## 

## -------- runner -------- ## 

_OPTS=""
_ARGS=""
_NOPTS=0
function _argparse() {
    _NOPTS=0
    local is_option=1

    # argparser
    for arg in "$@"; do
        if [[ ($is_option == 1) && ($arg == "--"*) ]]; then
            _NOPTS=$((_NOPTS+1))
            if [[ -z ${_OPTS} ]]; then
                _OPTS="${arg}"
            else
                _OPTS="${_OPTS} ${arg}"
            fi
        else
            is_option=0
            if [[ -z ${_ARGS} ]]; then
                _ARGS="${arg}"
            else
                _ARGS="${_ARGS} ${arg}"
            fi
        fi
    done
}

function aws_runner() {
    AWS="${AWS:-aws}"

    _argparse "$@"
    shift ${_NOPTS}
    cmd=$(echo "$1_$2" | sed "s/-/_/g")

    if [[ -n ${bypass} ]]; then
        ${AWS} ${_OPTS} "$@"
    elif [[ ($# -ge 2) && ("${AWS_EXTENSIONS[@]}" =~ "${cmd}") ]]; then
        shift 2
        $cmd "$@"
    else
        ${AWS} ${_OPTS} "$@"
    fi
}
